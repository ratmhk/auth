<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.mapper.RoleMapper" >

    <resultMap id="BaseResultMap" type="com.entity.Role" >
        <id column="id" property="id" jdbcType="VARCHAR" />
        <result column="role_name" property="roleName" jdbcType="VARCHAR" />
        <result column="mark" property="mark" jdbcType="VARCHAR" />
        <result column="status" property="status" jdbcType="VARCHAR" />
        <result column="create_user" property="createUser" jdbcType="VARCHAR" />
        <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
        <result column="update_user" property="updateUser" jdbcType="VARCHAR" />
        <result column="update_date" property="updateDate" jdbcType="TIMESTAMP" />
        <result column="level" property="level" jdbcType="INTEGER" />
    </resultMap>

    <sql id="Base_Column_List" >
    id, role_name, mark, status, create_user, create_date, update_user, update_date,
    level
  </sql>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
        select
        <include refid="Base_Column_List" />
        from role
        where id = #{id,jdbcType=VARCHAR}
    </select>

    <insert id="insert" parameterType="com.entity.Role" >
    insert into role (id, role_name, mark,
      status, create_user, create_date,
      update_user, update_date, level
      )
    values (#{id,jdbcType=VARCHAR}, #{roleName,jdbcType=VARCHAR}, #{mark,jdbcType=VARCHAR},
      #{status,jdbcType=VARCHAR}, #{createUser,jdbcType=VARCHAR}, #{createDate,jdbcType=TIMESTAMP},
      #{updateUser,jdbcType=VARCHAR}, #{updateDate,jdbcType=TIMESTAMP}, #{level,jdbcType=INTEGER}
      )
  </insert>

    <insert id="insertSelective" parameterType="com.entity.Role" >
        insert into role
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                id,
            </if>
            <if test="roleName != null" >
                role_name,
            </if>
            <if test="mark != null" >
                mark,
            </if>
            <if test="status != null" >
                status,
            </if>
            <if test="createUser != null" >
                create_user,
            </if>
            <if test="createDate != null" >
                create_date,
            </if>
            <if test="updateUser != null" >
                update_user,
            </if>
            <if test="updateDate != null" >
                update_date,
            </if>
            <if test="level != null" >
                level,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id,jdbcType=VARCHAR},
            </if>
            <if test="roleName != null" >
                #{roleName,jdbcType=VARCHAR},
            </if>
            <if test="mark != null" >
                #{mark,jdbcType=VARCHAR},
            </if>
            <if test="status != null" >
                #{status,jdbcType=VARCHAR},
            </if>
            <if test="createUser != null" >
                #{createUser,jdbcType=VARCHAR},
            </if>
            <if test="createDate != null" >
                #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="updateUser != null" >
                #{updateUser,jdbcType=VARCHAR},
            </if>
            <if test="updateDate != null" >
                #{updateDate,jdbcType=TIMESTAMP},
            </if>
            <if test="level != null" >
                #{level,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.entity.Role" >
        update role
        <set >
            <if test="roleName != null" >
                role_name = #{roleName,jdbcType=VARCHAR},
            </if>
            <if test="mark != null" >
                mark = #{mark,jdbcType=VARCHAR},
            </if>
            <if test="status != null" >
                status = #{status,jdbcType=VARCHAR},
            </if>
            <if test="createUser != null" >
                create_user = #{createUser,jdbcType=VARCHAR},
            </if>
            <if test="createDate != null" >
                create_date = #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="updateUser != null" >
                update_user = #{updateUser,jdbcType=VARCHAR},
            </if>
            <if test="updateDate != null" >
                update_date = #{updateDate,jdbcType=TIMESTAMP},
            </if>
            <if test="level != null" >
                level = #{level,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=VARCHAR}
    </update>

    <update id="updateByPrimaryKey" parameterType="com.entity.Role" >
    update role
    set role_name = #{roleName,jdbcType=VARCHAR},
      mark = #{mark,jdbcType=VARCHAR},
      status = #{status,jdbcType=VARCHAR},
      create_user = #{createUser,jdbcType=VARCHAR},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_user = #{updateUser,jdbcType=VARCHAR},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      level = #{level,jdbcType=INTEGER}
    where id = #{id,jdbcType=VARCHAR}
  </update>

    <select id="getListByMap" resultMap="BaseResultMap" parameterType="java.util.Map" >
        select
        <include refid="Base_Column_List" />
        from role
        <where>
            <if test="status != null  and status != ''" >
                status = #{status,jdbcType=VARCHAR}
            </if>
            <if test="roleName != null  and roleName != ''" >
             AND   role_name like CONCAT(#{roleName,jdbcType=VARCHAR},'%')
            </if>
            <if test="level != null  and level != ''" >
                AND   level > #{level,jdbcType=INTEGER}
            </if>
        </where>
        order by create_date desc
        <if test="startIndex != null and pageSize != null">
            limit #{startIndex}, #{pageSize}
        </if>
    </select>

    <select id="getList" resultMap="BaseResultMap" parameterType="java.util.Map" >
        select
        <include refid="Base_Column_List" />
        from role
        <where>
            <if test="status != null  and status != ''" >
                status = #{status,jdbcType=VARCHAR}
            </if>
            <if test="roleName != null  and roleName != ''" >
             AND   role_name like CONCAT(#{roleName,jdbcType=VARCHAR},'%')
            </if>
            <if test="level != null  and level != ''" >
                AND   level > #{level,jdbcType=INTEGER}
            </if>
        </where>
        order by create_date desc
        <if test="startIndex != null and pageSize != null">
            limit #{startIndex}, #{pageSize}
        </if>
    </select>

    <select id="getCountByMap" resultType="java.lang.Long" parameterType="java.util.Map" >
        select count(*) from role
        <where>
            <if test="status != null  and status != ''" >
                status = #{status,jdbcType=VARCHAR}
            </if>
            <if test="roleName != null  and roleName != ''" >
                role_name like CONCAT(#{roleName,jdbcType=VARCHAR},'%')
            </if>
            <if test="level != null  and level != ''" >
                AND   level > #{level,jdbcType=INTEGER}
            </if>
        </where>
    </select>

    <update id="updateStatus" parameterType="java.util.Map" >
        update role
        set
            status = #{status,jdbcType=VARCHAR},
            update_user = #{updateUser,jdbcType=VARCHAR},
            update_date = #{updateDate,jdbcType=TIMESTAMP}
        where id = #{roleId,jdbcType=VARCHAR}
    </update>

    <delete id="deleteBatch" parameterType="java.lang.String" >
        delete from role
        where ID in
        <foreach index="index" item="item" collection="ids" open="(" separator="," close=")">
            #{item}
        </foreach>

    </delete>

</mapper>